#!/usr/bin/perl
# 2010 (c) Przemys≈Çaw Iskra <sparky@pld-linux.org>
#
# extract files from .rar, .zip and .001 files

use strict;
use warnings;

sub unrar
{
	my $file = shift;

	my @exfiles;
	open IN, "-|", qw(unrar -idp x), $file;
	while ( <IN> ) {
		print $_;
		push @exfiles, $1
			if /^Extracting from (.*?)\s*$/;
	}
	close IN
		or return undef;

	print "File $file extracted.\n";
	unlink @exfiles;
}

# do unzip -l to determine internal dirs
sub unzip
{
	my $file = shift;

	my @exfiles;
	open IN, "-|", "unzip", $file;
	while ( <IN> ) {
		print $_;
		push @exfiles, $1
			if /^Archive:\s+(.*?)\s*$/;
	}
	close IN
		or return undef;

	print "File $file extracted.\n";
	unlink @exfiles;
}

sub fsize
{
	return (stat shift)[7];
}

sub unsplit
{
	my $file = shift;
	my $fs = fsize $file;

	( my $base = $file ) =~ s/\.001//;
	my @files = sort glob "$base.[0-9][0-9][0-9]";

	# starts at .000 ?
	return unless $files[0] eq $file;

	my $last_file = pop @files;

	# at least 2 files
	return unless scalar @files >= 1;

	# number of files must be the same as number in last file
	$last_file =~ /\.([0-9]{3})$/;
	return unless $1 == 1 + scalar @files;

	# last file must be smaller
	return if $fs <= fsize $last_file;

	foreach my $f ( @files ) {
		# all other files must have same size
		return unless $fs == fsize $f;
	}

	push @files, $last_file;

	$base =~ s#.*/##;
	print "unsplitting '@files' to '$base'\n";

	open F_OUT, ">", $base
		or return;

	my $len = 16 * 1024 * 1024;
	my $buf = " " x $len;
	$buf = "";
	foreach my $f ( @files ) {
		open F_IN, "<", $f
			or return;
		while ( read F_IN, $buf, $len ) {
			print F_OUT $buf
				or return;
		}
		close F_IN;
	}

	close F_OUT
		or return;

	unlink @files;
}

my @files = sort @ARGV;
while ( my $file = shift @files ) {
	next unless -r $file;
	if ( $file =~ /\.rar$/i ) {
		unrar( $file );
	} elsif ( $file =~ /\.zip$/i ) {
		unzip( $file );
	} elsif ( $file =~ /\.001$/ ) {
		unsplit( $file );
	} else {
		print "Skipping $file\n";
	}
}
